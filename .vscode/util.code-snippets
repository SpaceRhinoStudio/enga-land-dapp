{
  // Place your dapp-svelte workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "export className for svelte components": {
    "scope": "",
    "prefix": "exclass",
    "body": ["export let className: { [key in '$0']?: string } = {}"]
  },
  "set default value in jsdoc": {
    "scope": "",
    "prefix": "@default",
    "body": ["/** @default $0 */"]
  },
  "make value readonly jsdoc": {
    "scope": "",
    "prefix": "@readonly",
    "body": ["/** @readonly */"]
  },
  "rxjs pipe like operator definition": {
    "scope": "typescript",
    "prefix": "rxjspipe",
    "body": [
      "type InputType_$1<T> = $2",
      "type OperatorInputType_$1<T> = $3",
      "type OutputType_$1<R> = $4",
      "",
      "/** $9 */",
      "export function $1<T>(",
      "  $5",
      "): OperatorFunction<InputType_$1<T>, OutputType_$1<InputType_$1<T>>>",
      "/** $9 */",
      "export function $1<T, A>(",
      "  $5",
      "  op1: OperatorFunction<OperatorInputType_$1<T>, A>,",
      "): OperatorFunction<InputType_$1<T>, OutputType_$1<A>>",
      "/** $9 */",
      "export function $1<T, A, B>(",
      "  $5",
      "  op1: OperatorFunction<OperatorInputType_$1<T>, A>,",
      "  op2: OperatorFunction<A, B>,",
      "): OperatorFunction<InputType_$1<T>, OutputType_$1<B>>",
      "/** $9 */",
      "export function $1<T, A, B, C>(",
      "  $5",
      "  op1: OperatorFunction<OperatorInputType_$1<T>, A>,",
      "  op2: OperatorFunction<A, B>,",
      "  op3: OperatorFunction<B, C>,",
      "): OperatorFunction<InputType_$1<T>, OutputType_$1<C>>",
      "/** $9 */",
      "export function $1<T, A, B, C, D>(",
      "  $5",
      "  op1: OperatorFunction<OperatorInputType_$1<T>, A>,",
      "  op2: OperatorFunction<A, B>,",
      "  op3: OperatorFunction<B, C>,",
      "  op4: OperatorFunction<C, D>,",
      "): OperatorFunction<InputType_$1<T>, OutputType_$1<D>>",
      "/** $9 */",
      "export function $1<T, A, B, C, D, E>(",
      "  $5",
      "  op1: OperatorFunction<OperatorInputType_$1<T>, A>,",
      "  op2: OperatorFunction<A, B>,",
      "  op3: OperatorFunction<B, C>,",
      "  op4: OperatorFunction<C, D>,",
      "  op5: OperatorFunction<D, E>,",
      "): OperatorFunction<InputType_$1<T>, OutputType_$1<E>>",
      "/** $9 */",
      "export function $1<T, A, B, C, D, E, F>(",
      "  $5",
      "  op1: OperatorFunction<OperatorInputType_$1<T>, A>,",
      "  op2: OperatorFunction<A, B>,",
      "  op3: OperatorFunction<B, C>,",
      "  op4: OperatorFunction<C, D>,",
      "  op5: OperatorFunction<D, E>,",
      "  op6: OperatorFunction<E, F>,",
      "): OperatorFunction<InputType_$1<T>, OutputType_$1<F>>",
      "/** $9 */",
      "export function $1<T, A, B, C, D, E, F, G>(",
      "  $5",
      "  op1: OperatorFunction<OperatorInputType_$1<T>, A>,",
      "  op2: OperatorFunction<A, B>,",
      "  op3: OperatorFunction<B, C>,",
      "  op4: OperatorFunction<C, D>,",
      "  op5: OperatorFunction<D, E>,",
      "  op6: OperatorFunction<E, F>,",
      "  op7: OperatorFunction<F, G>,",
      "): OperatorFunction<InputType_$1<T>, OutputType_$1<G>>",
      "/** $9 */",
      "export function $1<T, A, B, C, D, E, F, G, H>(",
      "  $5",
      "  op1: OperatorFunction<OperatorInputType_$1<T>, A>,",
      "  op2: OperatorFunction<A, B>,",
      "  op3: OperatorFunction<B, C>,",
      "  op4: OperatorFunction<C, D>,",
      "  op5: OperatorFunction<D, E>,",
      "  op6: OperatorFunction<E, F>,",
      "  op7: OperatorFunction<F, G>,",
      "  op8: OperatorFunction<G, H>,",
      "): OperatorFunction<InputType_$1<T>, OutputType_$1<H>>",
      "/** $9 */",
      "export function $1<T, A, B, C, D, E, F, G, H, I>(",
      "  $5",
      "  op1: OperatorFunction<OperatorInputType_$1<T>, A>,",
      "  op2: OperatorFunction<A, B>,",
      "  op3: OperatorFunction<B, C>,",
      "  op4: OperatorFunction<C, D>,",
      "  op5: OperatorFunction<D, E>,",
      "  op6: OperatorFunction<E, F>,",
      "  op7: OperatorFunction<F, G>,",
      "  op8: OperatorFunction<G, H>,",
      "  op9: OperatorFunction<H, I>,",
      "): OperatorFunction<InputType_$1<T>, OutputType_$1<I>>",
      "/** $9 */",
      "export function $1<T, A, B, C, D, E, F, G, H, I>(",
      "  $5",
      "  op1: OperatorFunction<OperatorInputType_$1<T>, A>,",
      "  op2: OperatorFunction<A, B>,",
      "  op3: OperatorFunction<B, C>,",
      "  op4: OperatorFunction<C, D>,",
      "  op5: OperatorFunction<D, E>,",
      "  op6: OperatorFunction<E, F>,",
      "  op7: OperatorFunction<F, G>,",
      "  op8: OperatorFunction<G, H>,",
      "  op9: OperatorFunction<H, I>,",
      "  ...ops: OperatorFunction<unknown, unknown>[]",
      "): OperatorFunction<InputType_$1<T>, OutputType_$1<unknown>>",
      "",
      "/** $9 */",
      "export function $1<T>(",
      "  $5",
      "  ...ops: readonly OperatorFunction<OperatorInputType_$1<T>, unknown>[]",
      "): OperatorFunction<InputType_$1<T>, unknown> {",
      "  return pipe(",
      "    $0",
      "    //@ts-ignore it accepts any number of operations",
      "    ...ops,",
      "  )",
      "}"
    ]
  }
}
